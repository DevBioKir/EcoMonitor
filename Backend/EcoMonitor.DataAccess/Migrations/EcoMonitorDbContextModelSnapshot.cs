// <auto-generated />
using System;
using EcoMonitor.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcoMonitor.DataAccess.Migrations
{
    [DbContext(typeof(EcoMonitorDbContext))]
    partial class EcoMonitorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinPhotoBinTypeEntity", b =>
                {
                    b.Property<Guid>("BinPhotoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BinTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("BinPhotoId", "BinTypeId");

                    b.HasIndex("BinTypeId");

                    b.ToTable("BinPhotoBinType");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinPhotoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("FillLevel")
                        .HasColumnType("double precision");

                    b.Property<bool>("IsOutsideBin")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UrlFile")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BinPhotos");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("Id");

                    b.ToTable("BinTypes");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.Users.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("LastLogindAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("isLoginConfirmed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.Users.UserRoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinPhotoBinTypeEntity", b =>
                {
                    b.HasOne("EcoMonitor.DataAccess.Entities.BinPhotoEntity", "BinPhoto")
                        .WithMany("BinPhotoBinTypes")
                        .HasForeignKey("BinPhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcoMonitor.DataAccess.Entities.BinTypeEntity", "BinType")
                        .WithMany("BinPhotoBinTypes")
                        .HasForeignKey("BinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BinPhoto");

                    b.Navigation("BinType");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.Users.UserEntity", b =>
                {
                    b.HasOne("EcoMonitor.DataAccess.Entities.Users.UserRoleEntity", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinPhotoEntity", b =>
                {
                    b.Navigation("BinPhotoBinTypes");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.BinTypeEntity", b =>
                {
                    b.Navigation("BinPhotoBinTypes");
                });

            modelBuilder.Entity("EcoMonitor.DataAccess.Entities.Users.UserRoleEntity", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
